import pandas as pd
data = {
    'Date': ['2023-01-19', '2023-01-16', '2023-01-10', '2023-01-18', '2023-01-14', '2023-01-06', '2023-01-04', '2023-01-09', '2023-01-20', '2023-01-11', 
             '2023-01-13', '2023-01-08', '2023-01-15', '2023-01-05', '2023-01-01', '2023-01-03', '2023-01-02', '2023-01-07', '2023-01-12', '2023-01-17'],
    'Account_Type': ['Fixed Deposit', 'Current', 'Current', 'Savings', 'Recurring Deposit', 'Current', 'Recurring Deposit', 'Current', 'Recurring Deposit', 'Fixed Deposit',
                     'Recurring Deposit', 'Fixed Deposit', 'Fixed Deposit', 'Fixed Deposit', 'Savings', 'Fixed Deposit', 'Current', 'Recurring Deposit', 'Savings'],
    'Branch': ['Central', 'Uptown', 'Uptown', 'Uptown', 'Suburban', 'Suburban', 'Central', 'Central', 'Downtown', 'Downtown', 'Central', 'Suburban', 'Suburban', 'Uptown', 'Central', 'Downtown', 'Central', 'Suburban', 'Central'],
    'Transaction_Type': ['Loan Payment', 'Withdrawal', 'Loan Payment', 'Loan Payment', 'Loan Payment', 'Service Charge', 'Service Charge', 'Loan Payment', 'Service Charge', 'Deposit',
                         'Deposit', 'Service Charge', 'Service Charge', 'Service Charge', 'Deposit', 'Withdrawal', 'Service Charge', 'Loan Payment', 'Deposit'],
    'Transaction_Amount': [985.51, 641.43, 3363.85, 1914.6, 2788.57, 4584.05, 1621.82, 2346.72, 3899.98, 1529.59, 846.41, 1803.88, 1225.5, 4683.64, 4136.54, 3350.32, 4421.57, 4116.52, 1339.57, 4516.52],
    'Account_Balance': [6839.59, 8908.39, 12428.67, 5776.63, 4779.04, 7635.47, 6465.79, 10708.85, 12646.56, 2592.16, 6443.14, 6560.58, 4224.47, 6762.43, 8175.08, 12836.51, 8330.4, 9785.64, 8666.74, 8789.19]
}
df = pd.DataFrame(data)
filtered_amount = df[df['Transaction_Amount'] <= 2000]
loan_payment_high_balance = df[(df['Transaction_Type'] == 'Loan Payment') & (df['Account_Balance'] > 5000)]
uptown_transactions = df[df['Branch'] == 'Uptown']
print("Filtered rows (Transaction_Amount <= 2000):")
print(filtered_amount)
print("\nLoan Payment transactions with Account Balance > 5000:")
print(loan_payment_high_balance)
print("\nTransactions from the Uptown branch:")
print(uptown_transactions)


import pandas as pd
data = {
    'Date': ['2023-01-19', '2023-01-16', '2023-01-10', '2023-01-18', '2023-01-14', '2023-01-06', '2023-01-04', '2023-01-09', '2023-01-20', '2023-01-11', 
             '2023-01-13', '2023-01-08', '2023-01-15', '2023-01-05', '2023-01-01', '2023-01-03', '2023-01-02', '2023-01-07', '2023-01-12', '2023-01-17'],
    'Account_Type': ['Fixed Deposit', 'Current', 'Current', 'Savings', 'Recurring Deposit', 'Current', 'Recurring Deposit', 'Current', 'Recurring Deposit', 'Fixed Deposit',
                     'Recurring Deposit', 'Fixed Deposit', 'Fixed Deposit', 'Fixed Deposit', 'Savings', 'Fixed Deposit', 'Current', 'Recurring Deposit', 'Savings'],
    'Branch': ['Central', 'Uptown', 'Uptown', 'Uptown', 'Suburban', 'Suburban', 'Central', 'Central', 'Downtown', 'Downtown', 'Central', 'Suburban', 'Suburban', 'Uptown', 'Central', 'Downtown', 'Central', 'Suburban', 'Central'],
    'Transaction_Type': ['Loan Payment', 'Withdrawal', 'Loan Payment', 'Loan Payment', 'Loan Payment', 'Service Charge', 'Service Charge', 'Loan Payment', 'Service Charge', 'Deposit',
                         'Deposit', 'Service Charge', 'Service Charge', 'Service Charge', 'Deposit', 'Withdrawal', 'Service Charge', 'Loan Payment', 'Deposit'],
    'Transaction_Amount': [985.51, 641.43, 3363.85, 1914.6, 2788.57, 4584.05, 1621.82, 2346.72, 3899.98, 1529.59, 846.41, 1803.88, 1225.5, 4683.64, 4136.54, 3350.32, 4421.57, 4116.52, 1339.57, 4516.52],
    'Account_Balance': [6839.59, 8908.39, 12428.67, 5776.63, 4779.04, 7635.47, 6465.79, 10708.85, 12646.56, 2592.16, 6443.14, 6560.58, 4224.47, 6762.43, 8175.08, 12836.51, 8330.4, 9785.64, 8666.74, 8789.19]
}
df = pd.DataFrame(data)
df['Transaction_Fee'] = df['Transaction_Amount'] * 0.02
df['Balance_Status'] = df['Account_Balance'].apply(lambda x: 'High Balance' if x > 5000 else 'Low Balance')
print(df[['Date', 'Transaction_Amount', 'Transaction_Fee', 'Account_Balance', 'Balance_Status']])
